function [trainedModel] = trainSVM(data, trainingRatio, trainingLength)

% Extracting Features for training data
[trainedModel.X, trainedModel.response, trainedModel.features] = ...
    featureFcn(data, trainingRatio, trainingLength);
trainedModel.isCategoricalPredictor = [false, false, false, false,...
    false, false, false, true, true, true, true];

% Prepare data for training
trainedModel.predictorExtractionFcn = ...
    @(x) array2table(x, 'VariableNames', ...
    trainedModel.features.predictorNames);
trainedModel.predictors = trainedModel.predictorExtractionFcn(trainedModel.X);

% Define and train the classifier
trainedModel.classificationSVM = fitcsvm(...
    trainedModel.predictors, ...
    trainedModel.response, ...
    'KernelFunction', 'polynomial', ...
    'PolynomialOrder', 2, ...
    'KernelScale', 'auto', ...
    'BoxConstraint', 1, ...
    'Standardize', true, ...
    'ClassNames', [0; 1],...
    'CategoricalPredictors',trainedModel.isCategoricalPredictor);

% Add predict function to result structure
trainedModel.predictFcn = @(x) predict(trainedModel.classificationSVM, x);

% Cross Validation
trainedModel.crossValFold = 10;
trainedModel.crossVal = svmCrossVal(trainedModel,...
    trainedModel.crossValFold);

end

